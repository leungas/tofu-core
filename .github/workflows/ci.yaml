name: ci

on:
  pull_request:
    types:
      - opened
      - reopened
      - synchronize
    branches:
      - master

env: 
  DB_SECRET: Ar1iMEkTcHoKV7VLl1ywsiZrvuTh8LQR

jobs:
  validate:
    runs-on: ubuntu-latest
    steps:
      - name: Get codebase
        uses: actions/checkout@v3

      - name: Set runtime version
        uses: actions/setup-node@v3
        with:
          node-version: 16
      
      - name: Getting runner ip
        uses: haythem/public-ip@v1.2
        id: postgres-runner

      - name: Generate random password
        uses: Ba4bes/Password-Generator@v0.1
        id: postgres-pwd        
      
      - name: Create Azure Env
        uses: azure/login@v1
        with:
          creds: ${{secrets.AZURE_CREDS}}

      - name: Get our param file
        uses: danielr1996/envsubst-action@1.0.0
        env:
          DB_SECRET: ${{ env.DB_SECRET }}
        with:
          input: ./test/arms/postgres.value.json
          output: ./test/arms/postgres.input.json

      # - name: Loading out param file
      #   run: cat test/arms/postgres.input.json

      - name: Create resource group
        uses: azure/CLI@v1
        with:
          inlineScript: |            
            az group create --name rg-eas-tofu-test --location eastasia
            az deployment group create -n create-db -g rg-eas-tofu-test -f test/arms/postgres.arm.json -p test/arms/postgres.input.json > output.json

      - name: Capture DB name data
        run: |
            echo "DB_SERVER_NAME=`az postgres server list -g rg-eas-tofu-test --query '[0].name' -o tsv`" >> $GITHUB_ENV
        
      - name: Setup DB firewall
        uses: azure/CLI@v1
        with:
          inlineScript: |
            az postgres server firewall-rule create \
              --server-name ${{ env.DB_SERVER_NAME }} \
              --resource-group rg-eas-tofu-test \
              --name public-ip-opener-rule \
              --start-ip-address ${{ steps.postgres-runner.outputs.ipv4 }} \
              --end-ip-address ${{ steps.postgres-runner.outputs.ipv4 }}
              
      - name: Creating new db
        uses: azure/postgresql@v1
        continue-on-error: true
        with:
          connection-string: "host=${{ env.DB_SERVER_NAME }}.postgres.database.azure.com port=5432 dbname=postgres user=postgres@${{ env.DB_SERVER_NAME }} password=${{ env.DB_SECRET }} sslmode=require"
          server-name: ${{ env.DB_SERVER_NAME }}
          plsql-file: "test/arms/create-db.sql"

      - name: Get our param file
        uses: danielr1996/envsubst-action@1.0.0
        env:
          POSTGRES_HOST: ${{ env.DB_SERVER_NAME }}.postgres.database.azure.com
          POSTGRES_USER: postgres@${{ env.DB_SERVER_NAME }}
          POSTGRES_SECRET: ${{ env.DB_SECRET }}
        with:
          input: ./src/infrastructure/config/e2e.template.yaml
          output: ./src/infrastructure/config/e2e.config.yaml

      - name: Run tests
        env:
          ENV_APP_CONFIG: 'infrastructure/config/e2e.config.yaml'
        run: |
          yarn install
          yarn test
      
      - name: Run build test
        run: 
          docker build -t tofuworkspace:scannable .

      - name: Run scan
        uses: Azure/container-scan@v0
        with:
          image-name: tofuworkspace:scannable
          severity-threshold: MEDIUM

      - name: Do dismental
        uses: azure/CLI@v1
        with:
          inlineScript:
            az group delete --name rg-eas-tofu-test





  
